# Databricks notebook source
# Import required packages

import pyspark.sql.functions as func
from pyspark.sql.functions import struct
from pyspark.sql.functions import split
from pyspark.sql.functions import rand,when
from pyspark.ml.feature import CountVectorizer
from pyspark.sql.functions import col
from pyspark.sql.functions import udf
import nltk
from pyspark.ml.clustering import LDA
from nltk.corpus import stopwords 
from pyspark.sql.types import BooleanType,ArrayType,StringType,StructType
import re
from pyspark.ml.feature import HashingTF, IDF, Tokenizer
#nltk.download('stopwords')

# COMMAND ----------

# Creating dataframe from csv file.
data = sqlContext.read.format("com.databricks.spark.csv").option("header", "true").option("inferSchema", "true").option("parserLib", "UNIVOCITY").option("wholeFile","true").load("/FileStore/tables/th776k3r1500350625365/reviews_chicago.csv")
display(data)

# COMMAND ----------

# To remove listing ID which doesnt start with number.


# TODO: Something doesnt work, Need to check logic.
def regex_filter(x):
    regexs = ['\d+']
    
    if x and x.strip():
        for r in regexs:
            if re.match(r, x, re.IGNORECASE):
                return True
    return False 
    
    
    
filter_udf = udf(regex_filter, BooleanType())

rawdata = data.filter(filter_udf(data.listing_id))
rawdata = rawdata.limit(1000)
rawdata = rawdata.filter(rawdata.comments != "")
#display(rawdata)

# COMMAND ----------

rawdata = rawdata.where(col("listing_id").isin(
['12581064',	'1466368',	'6585861',	'17903682',	'6316235',	'18243435',	'349265',	'5810433',	'4706356',	'13065303',	'13961352',	'9573258',	'17134936',	'6655683',	'18614953',	'11433539',	'11436765',	'12413038',	'17831345',	'11436712',	'10223471',	'4862441',	'11436834',	'10719657',	'589871',	'15566486',	'8687539',	'6325307',	'17510411',	'17074321',	'6050527',	'18088856',	'13466210',	'14611960',	'16395468',	'17512435',	'15781880',	'14631349',	'10493776',	'8719735',	'16451190',	'17299935',	'14568366',	'3800675',	'17513277',	'15628879',	'17265669',	'14808072',	'13038318',	'13311675',	'11399852',	'28749',	'4632128',	'8814519',	'3010785',	'3172794',	'13504814',	'11494524',	'13509392',	'4301222',	'14883494',	'18568031',	'12999537',	'18018011',	'16012260',	'1135388',	'16649581',	'17812587',	'18609864',	'14221987',	'4243905',	'7021343',	'2396340',	'9049864',	'7731018',	'3302759',	'11594842',	'6553226',	'18370680',	'1278457',	'11209152',	'14181968',	'16739659',	'16418900',	'12083628',	'927327',	'13735299',	'5836043',	'9886178',	'12422521',	'17178213',	'15056781',	'15560722',	'17300311',	'4192679',	'13154559',	'15660143',	'7582924',	'15217088',	'422214',	'1798506',	'15552297',	'8474113',	'14150807',	'7760721',	'16854441',	'13839781',	'16853744',	'14838457',	'960326',	'15025763',	'12379595',	'372929',	'9479123',	'1565607',	'7899683',	'18521442',	'4709507',	'17916272',	'5185790',	'13328559',	'12470804',	'7330664',	'2176509',	'12869372',	'9885299',	'2268034',	'17028678',	'9885174',	'16275886',	'7002438',	'17698365',	'2062638',	'8017014',	'9298606',	'6246314',	'5706620',	'6644524',	'6423299',	'15857734',	'5571262',	'5657221',	'1524306',	'6229085',	'16398079',	'16812497',	'7947804',	'13075856',	'17643023',	'11971419',	'2212823',	'8399678',	'7914129',	'14221576',	'3129463',	'15534374',	'12360674',	'10861733',	'7772110',	'15720840',	'9623557',	'14253264',	'9452714',	'12581627',	'2997966',	'14186740',	'4510851',	'17175106',	'1698479',	'16687624',	'12343100',	'18550398',	'12553492',	'9797971',	'7852625',	'18151380',	'17865341',	'18169608',	'949420',	'12728908',	'16462474',	'4518365',	'484898',	'17638039',	'4644849',	'4840199',	'13414371',	'2051505',	'1656439',	'2659670',	'17807199',	'12424526',	'1292507',	'2269742',	'18389435',	'2819982',	'17528120',	'7921556',	'18479564',	'10452642',	'14859885',	'6794333',	'12382366',	'3629096',	'16031982',	'17494091',	'7330060',	'18307315',	'17616943',	'4427562',	'13066391',	'17151465',	'5997689',	'4440699',	'13123838',	'17347987',	'17559874',	'2601313',	'10296948',	'18371645',	'15656999',	'8884999',	'12069600',	'7074668',	'7833824',	'5882164',	'6575827',	'17221938',	'5990023',	'3594191',	'10020335',	'16202671',	'11801655',	'12008497',	'11894229',	'14929687',	'15329980',	'6782887',	'9348787',	'16764106',	'15720069',	'11056945',	'15448910',	'9402896',	'12008415',	'12368222',	'6092872',	'202204',	'13155002',	'16480895',	'1313143',	'5617768',	'10220860',	'18237729',	'9057917',	'12022599',	'6225547',	'6763763',	'4745281',	'15028010',	'15659032',	'15872109',	'13447727',	'18214824',	'15659647',	'1584509',	'11906370',	'10120450',	'18444127',	'5074013',	'11906232',	'17636501',	'9645529',	'15643210',	'17804437',	'13543796',	'15657331',	'15657261',	'11888624',	'13247748',	'15741340',	'11888451',	'9447099',	'11888263',	'11320334',	'16394258',	'9381370',	'6186243',	'18096865',	'6713438',	'18489661',	'12836948',	'17161870',	'9362927',	'17996797',	'11868315',	'4479112',	'9181257',	'11906101',	'11459929',	'18285892',	'11278906',	'13390160',	'18209082',	'8918362',	'18208652',	'4183886',	'5871440',	'15511180',	'15817013',	'16453692',	'3689246',	'9211857',	'18214631',	'9507795',	'9507791',	'16388723',	'14963779',	'6705844',	'6245923',	'13897000',	'18221893',	'16310732',	'15860161',	'18090895',	'18565482',	'15461426',	'5952748',	'9882149',	'15157079',	'984850',	'14469126',	'10487791',	'12307449',	'15647856',	'6447131',	'18421212',	'5945206',	'6383040',	'17858281',	'18395345',	'17482315',	'13390302',	'6014128',	'5592797',	'11342986',	'8170822',	'15436874',	'6693396',	'7021658',	'6345940',	'11304686',	'602854',	'11607924',	'11582953',	'15972873',	'16742255',	'13973025',	'17401985',	'15757537',	'2503128',	'16151207',	'12152708',	'18509369',	'6925567',	'4548481',	'15832052',	'8743574',	'6383224',	'4235885',	'1301530',	'13950418',	'17866934',	'14340085',	'17421433',	'15585578',	'17649894',	'15256339',	'5786224',	'2066883',	'10685337',	'12684163',	'17893471',	'16726544',	'12601128',	'17980244',	'18423958',	'15040914',	'6488146',	'5521442',	'18483873',	'15507289',	'18565172',	'17668099',	'15852819',	'16588514',	'7572706',	'11205769',	'18159711',	'15230450',	'12781237',	'15697739',	'1640268',	'15666171',	'3290859',	'15719013',	'12038184',	'13235782',	'12037066',	'15132653',	'10286240',	'12039617',	'165952',	'12588393',	'2817608',	'9010664',	'8256750',	'3521727',	'15219844',	'3292054',	'1965410',	'1964520',	'17906136',	'18570989',	'15649229',	'9992834',	'7600001',	'13236053',	'15284426',	'5059871',	'13884932',	'13822228',	'9384935',	'9384919',	'15774617',	'12039398',	'16069852',	'15315398',	'18461609',	'15101939',	'15397491',	'11907664',	'8614442',	'15315137',	'15707552',	'15510883',	'17460467',	'8743754',	'15706942',	'16837677',	'17345036',	'1960332',	'15706304',	'3090312',	'7227121',	'15662022',	'15296005',	'8229081',	'9165281',	'15508656',	'15492252',	'9478727',	'166706',	'15361068',	'16751957',	'17620294',	'4791587',	'15671769',	'6644005',	'15294497',	'14179871',	'14731720',	'6004949',	'15359703',	'15964310',	'14899316',	'1759266',	'15653796',	'15478415',	'3610971',	'17634614',	'15127787',	'15718220',	'6690014',	'5992125',	'15635436',	'15557919',	'15028762',	'7985234',	'15340573',	'4985148',	'14474320',	'2708200',	'6673071',	'12832601',	'1772912',	'7678127',	'11176460',	'16517516',	'17123723',	'18434433',	'8669412',	'15599810',	'9078918',	'13207526',	'15648407',	'15582851',	'15468102',	'13714745',	'13126529',	'15287352',	'13763493',	'18139961',	'15664364',	'15771536',	'18564279',	'15256305',	'18432523',	'13418984',	'16367827',	'10889345',	'15858916',	'15635466',	'12025151',	'14841279',	'15982139',	'13941460',	'11629849',	'13412939',	'6715',	'7901480',	'8520668',	'8148110',	'7817784',	'4038587',	'14803225',	'5648923',	'6515667',	'8633858',	'5537682',	'14122332',	'14416305',	'6863178',	'15071107',	'15644173',	'145690',	'6863046',	'1321332',	'12140',	'12037587',	'13643020',	'699284',	'1502700',	'1502674',	'14296844',	'17590813',	'387336',	'15509947',	'4040288',	'13018683',	'12035588',	'533831',	'13449584',	'6382734',	'5694572',	'6104431',	'12543338',	'5414968',	'25879',	'4668682',	'6528867',	'6528832',	'15374367',	'8515400',	'3413977',	'15406653',	'3627357',	'3479896',	'6854069',	'325842',	'14522062',	'7115041',	'3953322',	'11701466',	'13653414',	'8151935',	'15338402',	'8538325',	'18194698',	'15287161',	'16040117',	'17152735',	'10090585',	'10090801',	'4862952',	'15841070',	'18050766',	'15715958',	'14969057',	'8429035',	'15866666',	'17946171',	'16364317',	'4427529',	'17822849',	'6781104',	'14708737',	'15055798',	'11456952',	'15789317',	'18512202',	'10367823',	'1032943',	'6972944',	'16489277',	'8147771',	'1984545',	'9487892',	'13155027',	'15956191',	'13033226',	'13108080',	'5660151',	'4581364',	'12095628',	'17924500',	'13127930',	'16039516',	'8109503',	'15507789',	'13861389',	'18383599',	'17832768',	'15956927',	'17173266',	'13974915',	'10971343',	'8048252',	'12464708',	'14577780',	'5638991',	'909096',	'10498280',	'14760085',	'12949346',	'6712434',	'18134783',	'12230085',	'4246135',	'18123365',	'15664977',	'4456664',	'16620615',	'18616122',	'6780171',	'15345739',	'6064250',	'6528967',	'15216226',	'14732833',	'6078393',	'6716705',	'6716477',	'145659',	'12087574',	'6713251',	'11562068',	'15624697',	'6793653',	'6153674',	'6853688',	'12444707',	'6528643',	'7461425',	'11923150',	'6853914',	'1175278',	'17859080',	'16401947',	'4457161',	'12175196',	'3912315',	'18423706',	'18460988']))


# COMMAND ----------

def cleanup_text(record):
    text  = record[5]
    id   = record[2]
    words = text.split()
    # Default list of Stopwords
    stopwords_core = ['a', u'about', u'above', u'after', u'again', u'against', u'all', u'am', u'an', u'and', u'any', u'are', u'arent', u'as', u'at', 
    u'be', u'because', u'been', u'before', u'being', u'below', u'between', u'both', u'but', u'by', 
    u'can', 'cant', 'come', u'could', 'couldnt', 
    u'd', u'did', u'didn', u'do', u'does', u'doesnt', u'doing', u'dont', u'down', u'during', 
    u'each', 
    u'few', 'finally', u'for', u'from', u'further', 
    u'had', u'hadnt', u'has', u'hasnt', u'have', u'havent', u'having', u'he', u'her', u'here', u'hers', u'herself', u'him', u'himself', u'his', u'how', 
    u'i', u'if', u'in', u'into', u'is', u'isnt', u'it', u'its', u'itself', 
    u'just', 
    u'll', 
    u'm', u'me', u'might', u'more', u'most', u'must', u'my', u'myself', 
    u'no', u'nor', u'not', u'now', 
    u'o', u'of', u'off', u'on', u'once', u'only', u'or', u'other', u'our', u'ours', u'ourselves', u'out', u'over', u'own', 
    u'r', u're', 
    u's', 'said', u'same', u'she', u'should', u'shouldnt', u'so', u'some', u'such', 
    u't', u'than', u'that', 'thats', u'the', u'their', u'theirs', u'them', u'themselves', u'then', u'there', u'these', u'they', u'this', u'those', u'through', u'to', u'too', 
    u'under', u'until', u'up', 
    u'very', 
    u'was', u'wasnt', u'we', u'were', u'werent', u'what', u'when', u'where', u'which', u'while', u'who', u'whom', u'why', u'will', u'with', u'wont', u'would', 
    u'y', u'you', u'your', u'yours', u'yourself', u'yourselves']
    
    # Custom List of Stopwords - Add your own here
    stopwords_custom = ['']
    stopwords = stopwords_core + stopwords_custom
    stopwords = [word.lower() for word in stopwords]    
    
    text_out = [re.sub('[^a-zA-Z0-9]','',word) for word in words]                                       # Remove special characters
    text_out = [word.lower() for word in text_out if len(word)>2 and word.lower() not in stopwords]     # Remove stopwords and words under X length
    return text_out

udf_cleantext = udf(cleanup_text , ArrayType(StringType()))
clean_text = rawdata.withColumn("words", udf_cleantext(struct([rawdata[x] for x in rawdata.columns])))

# COMMAND ----------

display(clean_text)

# COMMAND ----------

# Term Frequency Vectorization  - Option 1 (Using hashingTF): 
#hashingTF = HashingTF(inputCol="words", outputCol="rawFeatures", numFeatures=20)
#featurizedData = hashingTF.transform(clean_text)

# Term Frequency Vectorization  - Option 2 (CountVectorizer)    : 
cv = CountVectorizer(inputCol="words", outputCol="rawFeatures", vocabSize = 1000)
cvmodel = cv.fit(clean_text)
featurizedData = cvmodel.transform(clean_text)

vocab = cvmodel.vocabulary
vocab_broadcast = sc.broadcast(vocab)

idf = IDF(inputCol="rawFeatures", outputCol="features")
idfModel = idf.fit(featurizedData)
rescaledData = idfModel.transform(featurizedData)

# COMMAND ----------

# Generate 25 Data-Driven Topics:
lda = LDA(k=25, seed=123, optimizer="em", featuresCol="features")

ldamodel = lda.fit(rescaledData)

#model.isDistributed()
#model.vocabSize()

ldatopics = ldamodel.describeTopics()
#ldatopics.show(25)

def map_termID_to_Word(termIndices):
    words = []
    for termID in termIndices:
        words.append(vocab_broadcast.value[termID])
    
    return words

udf_map_termID_to_Word = udf(map_termID_to_Word , ArrayType(StringType()))
ldatopics_mapped = ldatopics.withColumn("topic_desc", udf_map_termID_to_Word(ldatopics.termIndices))
ldatopics_mapped.select(ldatopics_mapped.topic, ldatopics_mapped.topic_desc).show(50,False)
