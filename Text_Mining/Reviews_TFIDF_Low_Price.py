# Databricks notebook source
# Import required packages

import pyspark.sql.functions as func
from pyspark.sql.functions import struct
from pyspark.sql.functions import split
from pyspark.sql.functions import rand,when
from pyspark.ml.feature import CountVectorizer
from pyspark.sql.functions import col
from pyspark.sql.functions import udf
import nltk
from pyspark.ml.clustering import LDA
from nltk.corpus import stopwords 
from pyspark.sql.types import BooleanType,ArrayType,StringType,StructType
import re
from pyspark.ml.feature import HashingTF, IDF, Tokenizer
#nltk.download('stopwords')

# COMMAND ----------

# Creating dataframe from csv file.
data = sqlContext.read.format("com.databricks.spark.csv").option("header", "true").option("inferSchema", "true").option("parserLib", "UNIVOCITY").option("wholeFile","true").load("/FileStore/tables/th776k3r1500350625365/reviews_chicago.csv")
display(data)

# COMMAND ----------

# To remove listing ID which doesnt start with number.

# TODO: Something doesnt work, Need to check logic.
def regex_filter(x):
    regexs = ['\d+']
    
    if x and x.strip():
        for r in regexs:
            if re.match(r, x, re.IGNORECASE):
                return True
    return False 
    
    
    
filter_udf = udf(regex_filter, BooleanType())

rawdata = data.filter(filter_udf(data.listing_id))
rawdata = rawdata.limit(1000)
rawdata = rawdata.filter(rawdata.comments != "")
#display(rawdata)

# COMMAND ----------

rawdata = rawdata.where(col("listing_id").isin(
['16740225',	'789867',	'16701336',	'8148031',	'9492864',	'13028662',	'15909282',	'15799391',	'3318359',	'3907071',	'13074067',	'4011519',	'13892983',	'16023745',	'17676950',	'10610',	'13379881',	'16836657',	'3319109',	'18375776',	'15701532',	'15471122',	'12308104',	'12474957',	'3983057',	'18071978',	'15889957',	'15874839',	'12111530',	'15889904',	'10070422',	'15874365',	'15876178',	'15889919',	'15823434',	'10101026',	'10100835',	'10071396',	'12110676',	'12111066',	'16467855',	'18585265',	'12092498',	'16146505',	'7359188',	'16823953',	'16646072',	'16827583',	'9041069',	'17908408',	'7854234',	'3696178',	'18339858',	'13999202',	'9050138',	'6077875',	'8273329',	'18124704',	'14281166',	'154643157',	'17610618',	'1439042',	'15640689',	'13100435',	'17019650',	'15805987',	'14397701',	'8676695',	'408267',	'5481685',	'408268',	'9050129',	'8223102',	'8999175',	'1725110',	'16827863',	'16824773',	'3986991',	'14855558',	'14899794',	'13408456',	'15547371',	'13548290',	'13837551',	'13502828',	'18274867',	'4359719',	'15818427',	'16052779',	'7309782',	'618365',	'18373716',	'4330309',	'7989793',	'15545081',	'16189546',	'14091733',	'2824585',	'3946324',	'12112830',	'18414972',	'14586209',	'14958355',	'4067570',	'8484777',	'4365466',	'3742513',	'4351295',	'790934',	'6039038',	'6807789',	'15549146',	'8305935',	'6375968',	'5569521',	'3994046',	'17231066',	'14935932',	'15026300',	'14446278',	'12244370',	'15341369',	'12226594',	'1475647',	'8770382',	'9050149',	'14950882',	'13218606',	'1461451',	'18408506',	'16528767',	'10515185',	'16707059',	'10577807',	'4511517',	'16690759',	'626287',	'5095370',	'17850311',	'10469377',	'10156983',	'10844851',	'17795462',	'11544575',	'12218935',	'17844157',	'5794319',	'18033017',	'4133737',	'18314877',	'13529171',	'18162012',	'7069327',	'8117860',	'13539923',	'16528901',	'18438438',	'7787607',	'4511482',	'4511426',	'16963833',	'2117558',	'18159005',	'2117557',	'15535544',	'14486555',	'11799685',	'14895510',	'13280223',	'4979274',	'7650918',	'16589979',	'18484146',	'17158662',	'17921473',	'13358706',	'13240673',	'9303267',	'15436230',	'15042311',	'16040153',	'17235769',	'11680697',	'16709779',	'16558681',	'16592678',	'9488188',	'13003641',	'17895468',	'7203650',	'207116',	'14805288',	'18359380',	'220660',	'17159823',	'8422216',	'2515100',	'17302645',	'13588840',	'17569999',	'14914810',	'18583640',	'724895',	'724656',	'17929210',	'15324238',	'16996930',	'10098920',	'15519276',	'17191214',	'17157474',	'18194161',	'15453215',	'14027069',	'13788610',	'13064681',	'8014758',	'3479649',	'15966273',	'6504076',	'8167169',	'4647788',	'9233356',	'13980732',	'12891430',	'16096254',	'17934980',	'16986137',	'14169205',	'10811857',	'14371251',	'15480695',	'12268908',	'15480030',	'18092210',	'17745910',	'16068518',	'14282425',	'18428074',	'16068455',	'13900931',	'15821099',	'14553446',	'16722428',	'14015429',	'12917317',	'14014799',	'17073389',	'18108580',	'18519264',	'16568427',	'12916784',	'14014347',	'18255784',	'13915013',	'8716753',	'9995220',	'10034077',	'12434982',	'10020977',	'8135784',	'16088330',	'17925617',	'15619238',	'17680767',	'14126662',	'17617260',	'16395627',	'12467348',	'17479706',	'13990045',	'14731359',	'7197783',	'13954110',	'18524534',	'17404309',	'16999307',	'14589777',	'16554438',	'17126504',	'15618206',	'13978463',	'11261614',	'14649120',	'16336352',	'9531440',	'15094729',	'15871357',	'11670661',	'12493755',	'16778120',	'12494747',	'16999778',	'18637096',	'14770773',	'257601',	'14200918',	'13780638',	'15311581',	'15309122',	'12998977',	'438850',	'13027296',	'17154948',	'2611538',	'14088081',	'13033130',	'14180118',	'13033156',	'14969136',	'3177497',	'13065414',	'16172970',	'13066378',	'14857529',	'14857315',	'14857205',	'14857073',	'14856790',	'14855816',	'14857431',	'16496816',	'13550010',	'4318291',	'8988738',	'9708726',	'18591407',	'13379824',	'18591140',	'18476252',	'18475942',	'18590492',	'18588885',	'18465086',	'17904971',	'17405746',	'18215003',	'18332249',	'13047673',	'18446357',	'7885822',	'15343136',	'10999085',	'2305230',	'2305280',	'2364469',	'15289140',	'14089727',	'12891822',	'16751771',	'12708231',	'18490327',	'18094969',	'15045268',	'2930499',	'10947455',	'13975882',	'12158686',	'18327939',	'18327361',	'18327442',	'18327516',	'18327992',	'18327762',	'18327819',	'18326528',	'18328096',	'18327592',	'18327281',	'14115706',	'14115665',	'13859218',	'14473091',	'13671981',	'14028571',	'18549745',	'4105283',	'17079001',	'18195958',	'7094014',	'15219390',	'10576883',	'18373950',	'14556304',	'14141861',	'17876078',	'15669026',	'17666567',	'9403751',	'18158318',	'641526',	'204812',	'264184',	'12822377',	'641532',	'234060',	'6777362',	'12823231',	'233500',	'15456348',	'18006439',	'233528',	'17005094',	'14467472',	'8429764',	'4479828',	'11768586',	'8454437',	'6377862',	'15484924',	'13753623',	'14646743',	'14619020',	'14421786',	'14702468',	'15026595',	'6764230',	'15771629',	'15423943',	'12136219',	'17027582',	'12541151',	'15410843',	'17992312',	'13494669',	'2573888',	'17168028',	'7825308',	'18345901',	'18486947',	'32346',	'18429930',	'14529530',	'5223619',	'6419072',	'18600236',	'7430730',	'8288883',	'7807038',	'6975423',	'2576971',	'10131101',	'5511358',	'18157129',	'4214683',	'17895062',	'9596278',	'4567558',	'16302641',	'16556321',	'18072628',	'4735600',	'14967050',	'18580167',	'18463041',	'15379368',	'13189671',	'18588422',	'17147256',	'14429878',	'18582618',	'18609343',	'15378856',	'14215568',	'15344208',	'915372',	'5980645',	'15254346',	'6925326',	'16854051',	'12156610',	'13699494',	'7973300',	'10278470',	'7735577',	'17562263',	'14989350',	'3906329',	'10861804',	'8370508',	'8524788',	'2898588',	'13416364',	'15546520',	'13842166',	'16855993',	'9679005',	'15314428',	'7432064',	'14968345',	'6185638',	'16408143',	'7004149',	'3842224',	'7921380',	'17438195',	'15552457',	'6967492',	'4065712',	'479086',	'9577126',	'4589379',	'4235547',	'8799237',	'4612288',	'15550886',	'16163330',	'13335848',	'17434902',	'6448745',	'16528632',	'4060519',	'9269658',	'14797232',	'15114503',	'14076360',	'17075403',	'12568350',	'10824499',	'13863311',	'16371960',	'16031302',	'15926037',	'14892123',	'13509694',	'12090956',	'15925524',	'9690523',	'12467112',	'15925996',	'11276504',	'2515629',	'12243016',	'10100747',	'13635380',	'15925916',	'16269676',	'13656318',	'15926217',	'7982764',	'16486129',	'1027463',	'1027741',	'18560424',	'16194451',	'16781530',	'2564678',	'1027405',	'17565878',	'15757858',	'7360828',	'7327846',	'14055052',	'17679124',	'7796730',	'13186084',	'16365205',	'11056715',	'7804913',	'7382294',	'18078850',	'15409046',	'7095238',	'7805526',	'5804791',	'5785758',	'6957460',	'14301555',	'18374071',	'12221851',	'12222012',	'11599813',	'5958652',	'11532825',	'17637495',	'12222103',	'12221938',	'7370580',	'11040622',	'8827744',	'12039265',	'12039993',	'6472628',	'9007351',	'17905286',	'16493494',	'18221172',	'17267668',	'15463827',	'12192041',	'12221723',	'7511458',	'18521386',	'18522396',	'8689532',	'15064745',	'12211684',	'12211461',	'13244213',	'13128883',	'17207866',	'8522188',	'11146518',	'14747242',	'6900612',	'5283285',	'18178150',	'12321227',	'15843531',	'18465345',	'13374561',	'14614436',	'14692242',	'17140554',	'18465687',	'272728',	'3787859',	'15360917',	'611839',	'9096802',	'15548581',	'8985325',	'13311396',	'17448630',	'17448533',	'6004411',	'17448278',	'14518982',	'18360284',	'18561941',	'16447317',	'12602880',	'13117078',	'4720154',	'10588800',	'13230231',	'17160779',	'16964771',	'15392930',	'2907500',	'4192849',	'3811926',	'11011261',	'16723509',	'18328906',	'14139835',	'18329000',	'18515480',	'18591677',	'18350616',	'14502969',	'18591452',	'14237101',	'13667729',	'14933755',	'14139920',	'14025455',	'14450829',	'4052930',	'12254863',	'10696416',	'18393252']))


# COMMAND ----------

def cleanup_text(record):
    text  = record[5]
    id   = record[2]
    words = text.split()
    # Default list of Stopwords
    stopwords_core = ['a', u'about', u'above', u'after', u'again', u'against', u'all', u'am', u'an', u'and', u'any', u'are', u'arent', u'as', u'at', 
    u'be', u'because', u'been', u'before', u'being', u'below', u'between', u'both', u'but', u'by', 
    u'can', 'cant', 'come', u'could', 'couldnt', 
    u'd', u'did', u'didn', u'do', u'does', u'doesnt', u'doing', u'dont', u'down', u'during', 
    u'each', 
    u'few', 'finally', u'for', u'from', u'further', 
    u'had', u'hadnt', u'has', u'hasnt', u'have', u'havent', u'having', u'he', u'her', u'here', u'hers', u'herself', u'him', u'himself', u'his', u'how', 
    u'i', u'if', u'in', u'into', u'is', u'isnt', u'it', u'its', u'itself', 
    u'just', 
    u'll', 
    u'm', u'me', u'might', u'more', u'most', u'must', u'my', u'myself', 
    u'no', u'nor', u'not', u'now', 
    u'o', u'of', u'off', u'on', u'once', u'only', u'or', u'other', u'our', u'ours', u'ourselves', u'out', u'over', u'own', 
    u'r', u're', 
    u's', 'said', u'same', u'she', u'should', u'shouldnt', u'so', u'some', u'such', 
    u't', u'than', u'that', 'thats', u'the', u'their', u'theirs', u'them', u'themselves', u'then', u'there', u'these', u'they', u'this', u'those', u'through', u'to', u'too', 
    u'under', u'until', u'up', 
    u'very', 
    u'was', u'wasnt', u'we', u'were', u'werent', u'what', u'when', u'where', u'which', u'while', u'who', u'whom', u'why', u'will', u'with', u'wont', u'would', 
    u'y', u'you', u'your', u'yours', u'yourself', u'yourselves']
    
    # Custom List of Stopwords - Add your own here
    stopwords_custom = ['']
    stopwords = stopwords_core + stopwords_custom
    stopwords = [word.lower() for word in stopwords]    
    
    text_out = [re.sub('[^a-zA-Z0-9]','',word) for word in words]                                       # Remove special characters
    text_out = [word.lower() for word in text_out if len(word)>2 and word.lower() not in stopwords]     # Remove stopwords and words under X length
    return text_out

udf_cleantext = udf(cleanup_text , ArrayType(StringType()))
clean_text = rawdata.withColumn("words", udf_cleantext(struct([rawdata[x] for x in rawdata.columns])))

# COMMAND ----------

display(clean_text)

# COMMAND ----------

# Term Frequency Vectorization  - Option 1 (Using hashingTF): 
#hashingTF = HashingTF(inputCol="words", outputCol="rawFeatures", numFeatures=20)
#featurizedData = hashingTF.transform(clean_text)

# Term Frequency Vectorization  - Option 2 (CountVectorizer)    : 
cv = CountVectorizer(inputCol="words", outputCol="rawFeatures", vocabSize = 1000)
cvmodel = cv.fit(clean_text)
featurizedData = cvmodel.transform(clean_text)

vocab = cvmodel.vocabulary
vocab_broadcast = sc.broadcast(vocab)

idf = IDF(inputCol="rawFeatures", outputCol="features")
idfModel = idf.fit(featurizedData)
rescaledData = idfModel.transform(featurizedData)

# COMMAND ----------

# Generate 25 Data-Driven Topics:
lda = LDA(k=25, seed=123, optimizer="em", featuresCol="features")

ldamodel = lda.fit(rescaledData)

#model.isDistributed()
#model.vocabSize()

ldatopics = ldamodel.describeTopics()
#ldatopics.show(25)

def map_termID_to_Word(termIndices):
    words = []
    for termID in termIndices:
        words.append(vocab_broadcast.value[termID])
    
    return words

udf_map_termID_to_Word = udf(map_termID_to_Word , ArrayType(StringType()))
ldatopics_mapped = ldatopics.withColumn("topic_desc", udf_map_termID_to_Word(ldatopics.termIndices))
ldatopics_mapped.select(ldatopics_mapped.topic, ldatopics_mapped.topic_desc).show(50,False)
