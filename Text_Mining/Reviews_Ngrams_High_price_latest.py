# Databricks notebook source
# Import required packages

import pyspark.sql.functions as func
from pyspark.sql.functions import struct
from pyspark.sql.functions import split
from pyspark.sql.functions import rand,when
from pyspark.ml.feature import CountVectorizer
from pyspark.sql.functions import col
from pyspark.sql.functions import udf
import nltk
from nltk.corpus import stopwords 
from pyspark.sql.types import BooleanType,ArrayType,StringType,StructType
import re
#nltk.download('stopwords')

# COMMAND ----------

# Creating dataframe from csv file.
data = sqlContext.read.format("com.databricks.spark.csv").option("header", "true").option("inferSchema", "true").option("parserLib", "UNIVOCITY").option("wholeFile","true").load("/FileStore/tables/th776k3r1500350625365/reviews_chicago.csv")

# COMMAND ----------

# To remove listing ID which doesnt start with number.

# TODO: Something doesnt work, Need to check logic.
def regex_filter(x):
    regexs = ['\d+']
    
    if x and x.strip():
        for r in regexs:
            if re.match(r, x, re.IGNORECASE):
                return True
    return False 
    
    
filter_udf = udf(regex_filter, BooleanType())

data_filter = data.filter(filter_udf(data.listing_id))
data_filter = data_filter.filter(data_filter.comments != "")

# COMMAND ----------

data_filter_high = data_filter.where(col("listing_id").isin(
['12581064',	'1466368',	'6585861',	'17903682',	'6316235',	'18243435',	'349265',	'5810433',	'4706356',	'13065303',	'13961352',	'9573258',	'17134936',	'6655683',	'18614953',	'11433539',	'11436765',	'12413038',	'17831345',	'11436712',	'10223471',	'4862441',	'11436834',	'10719657',	'589871',	'15566486',	'8687539',	'6325307',	'17510411',	'17074321',	'6050527',	'18088856',	'13466210',	'14611960',	'16395468',	'17512435',	'15781880',	'14631349',	'10493776',	'8719735',	'16451190',	'17299935',	'14568366',	'3800675',	'17513277',	'15628879',	'17265669',	'14808072',	'13038318',	'13311675',	'11399852',	'28749',	'4632128',	'8814519',	'3010785',	'3172794',	'13504814',	'11494524',	'13509392',	'4301222',	'14883494',	'18568031',	'12999537',	'18018011',	'16012260',	'1135388',	'16649581',	'17812587',	'18609864',	'14221987',	'4243905',	'7021343',	'2396340',	'9049864',	'7731018',	'3302759',	'11594842',	'6553226',	'18370680',	'1278457',	'11209152',	'14181968',	'16739659',	'16418900',	'12083628',	'927327',	'13735299',	'5836043',	'9886178',	'12422521',	'17178213',	'15056781',	'15560722',	'17300311',	'4192679',	'13154559',	'15660143',	'7582924',	'15217088',	'422214',	'1798506',	'15552297',	'8474113',	'14150807',	'7760721',	'16854441',	'13839781',	'16853744',	'14838457',	'960326',	'15025763',	'12379595',	'372929',	'9479123',	'1565607',	'7899683',	'18521442',	'4709507',	'17916272',	'5185790',	'13328559',	'12470804',	'7330664',	'2176509',	'12869372',	'9885299',	'2268034',	'17028678',	'9885174',	'16275886',	'7002438',	'17698365',	'2062638',	'8017014',	'9298606',	'6246314',	'5706620',	'6644524',	'6423299',	'15857734',	'5571262',	'5657221',	'1524306',	'6229085',	'16398079',	'16812497',	'7947804',	'13075856',	'17643023',	'11971419',	'2212823',	'8399678',	'7914129',	'14221576',	'3129463',	'15534374',	'12360674',	'10861733',	'7772110',	'15720840',	'9623557',	'14253264',	'9452714',	'12581627',	'2997966',	'14186740',	'4510851',	'17175106',	'1698479',	'16687624',	'12343100',	'18550398',	'12553492',	'9797971',	'7852625',	'18151380',	'17865341',	'18169608',	'949420',	'12728908',	'16462474',	'4518365',	'484898',	'17638039',	'4644849',	'4840199',	'13414371',	'2051505',	'1656439',	'2659670',	'17807199',	'12424526',	'1292507',	'2269742',	'18389435',	'2819982',	'17528120',	'7921556',	'18479564',	'10452642',	'14859885',	'6794333',	'12382366',	'3629096',	'16031982',	'17494091',	'7330060',	'18307315',	'17616943',	'4427562',	'13066391',	'17151465',	'5997689',	'4440699',	'13123838',	'17347987',	'17559874',	'2601313',	'10296948',	'18371645',	'15656999',	'8884999',	'12069600',	'7074668',	'7833824',	'5882164',	'6575827',	'17221938',	'5990023',	'3594191',	'10020335',	'16202671',	'11801655',	'12008497',	'11894229',	'14929687',	'15329980',	'6782887',	'9348787',	'16764106',	'15720069',	'11056945',	'15448910',	'9402896',	'12008415',	'12368222',	'6092872',	'202204',	'13155002',	'16480895',	'1313143',	'5617768',	'10220860',	'18237729',	'9057917',	'12022599',	'6225547',	'6763763',	'4745281',	'15028010',	'15659032',	'15872109',	'13447727',	'18214824',	'15659647',	'1584509',	'11906370',	'10120450',	'18444127',	'5074013',	'11906232',	'17636501',	'9645529',	'15643210',	'17804437',	'13543796',	'15657331',	'15657261',	'11888624',	'13247748',	'15741340',	'11888451',	'9447099',	'11888263',	'11320334',	'16394258',	'9381370',	'6186243',	'18096865',	'6713438',	'18489661',	'12836948',	'17161870',	'9362927',	'17996797',	'11868315',	'4479112',	'9181257',	'11906101',	'11459929',	'18285892',	'11278906',	'13390160',	'18209082',	'8918362',	'18208652',	'4183886',	'5871440',	'15511180',	'15817013',	'16453692',	'3689246',	'9211857',	'18214631',	'9507795',	'9507791',	'16388723',	'14963779',	'6705844',	'6245923',	'13897000',	'18221893',	'16310732',	'15860161',	'18090895',	'18565482',	'15461426',	'5952748',	'9882149',	'15157079',	'984850',	'14469126',	'10487791',	'12307449',	'15647856',	'6447131',	'18421212',	'5945206',	'6383040',	'17858281',	'18395345',	'17482315',	'13390302',	'6014128',	'5592797',	'11342986',	'8170822',	'15436874',	'6693396',	'7021658',	'6345940',	'11304686',	'602854',	'11607924',	'11582953',	'15972873',	'16742255',	'13973025',	'17401985',	'15757537',	'2503128',	'16151207',	'12152708',	'18509369',	'6925567',	'4548481',	'15832052',	'8743574',	'6383224',	'4235885',	'1301530',	'13950418',	'17866934',	'14340085',	'17421433',	'15585578',	'17649894',	'15256339',	'5786224',	'2066883',	'10685337',	'12684163',	'17893471',	'16726544',	'12601128',	'17980244',	'18423958',	'15040914',	'6488146',	'5521442',	'18483873',	'15507289',	'18565172',	'17668099',	'15852819',	'16588514',	'7572706',	'11205769',	'18159711',	'15230450',	'12781237',	'15697739',	'1640268',	'15666171',	'3290859',	'15719013',	'12038184',	'13235782',	'12037066',	'15132653',	'10286240',	'12039617',	'165952',	'12588393',	'2817608',	'9010664',	'8256750',	'3521727',	'15219844',	'3292054',	'1965410',	'1964520',	'17906136',	'18570989',	'15649229',	'9992834',	'7600001',	'13236053',	'15284426',	'5059871',	'13884932',	'13822228',	'9384935',	'9384919',	'15774617',	'12039398',	'16069852',	'15315398',	'18461609',	'15101939',	'15397491',	'11907664',	'8614442',	'15315137',	'15707552',	'15510883',	'17460467',	'8743754',	'15706942',	'16837677',	'17345036',	'1960332',	'15706304',	'3090312',	'7227121',	'15662022',	'15296005',	'8229081',	'9165281',	'15508656',	'15492252',	'9478727',	'166706',	'15361068',	'16751957',	'17620294',	'4791587',	'15671769',	'6644005',	'15294497',	'14179871',	'14731720',	'6004949',	'15359703',	'15964310',	'14899316',	'1759266',	'15653796',	'15478415',	'3610971',	'17634614',	'15127787',	'15718220',	'6690014',	'5992125',	'15635436',	'15557919',	'15028762',	'7985234',	'15340573',	'4985148',	'14474320',	'2708200',	'6673071',	'12832601',	'1772912',	'7678127',	'11176460',	'16517516',	'17123723',	'18434433',	'8669412',	'15599810',	'9078918',	'13207526',	'15648407',	'15582851',	'15468102',	'13714745',	'13126529',	'15287352',	'13763493',	'18139961',	'15664364',	'15771536',	'18564279',	'15256305',	'18432523',	'13418984',	'16367827',	'10889345',	'15858916',	'15635466',	'12025151',	'14841279',	'15982139',	'13941460',	'11629849',	'13412939',	'6715',	'7901480',	'8520668',	'8148110',	'7817784',	'4038587',	'14803225',	'5648923',	'6515667',	'8633858',	'5537682',	'14122332',	'14416305',	'6863178',	'15071107',	'15644173',	'145690',	'6863046',	'1321332',	'12140',	'12037587',	'13643020',	'699284',	'1502700',	'1502674',	'14296844',	'17590813',	'387336',	'15509947',	'4040288',	'13018683',	'12035588',	'533831',	'13449584',	'6382734',	'5694572',	'6104431',	'12543338',	'5414968',	'25879',	'4668682',	'6528867',	'6528832',	'15374367',	'8515400',	'3413977',	'15406653',	'3627357',	'3479896',	'6854069',	'325842',	'14522062',	'7115041',	'3953322',	'11701466',	'13653414',	'8151935',	'15338402',	'8538325',	'18194698',	'15287161',	'16040117',	'17152735',	'10090585',	'10090801',	'4862952',	'15841070',	'18050766',	'15715958',	'14969057',	'8429035',	'15866666',	'17946171',	'16364317',	'4427529',	'17822849',	'6781104',	'14708737',	'15055798',	'11456952',	'15789317',	'18512202',	'10367823',	'1032943',	'6972944',	'16489277',	'8147771',	'1984545',	'9487892',	'13155027',	'15956191',	'13033226',	'13108080',	'5660151',	'4581364',	'12095628',	'17924500',	'13127930',	'16039516',	'8109503',	'15507789',	'13861389',	'18383599',	'17832768',	'15956927',	'17173266',	'13974915',	'10971343',	'8048252',	'12464708',	'14577780',	'5638991',	'909096',	'10498280',	'14760085',	'12949346',	'6712434',	'18134783',	'12230085',	'4246135',	'18123365',	'15664977',	'4456664',	'16620615',	'18616122',	'6780171',	'15345739',	'6064250',	'6528967',	'15216226',	'14732833',	'6078393',	'6716705',	'6716477',	'145659',	'12087574',	'6713251',	'11562068',	'15624697',	'6793653',	'6153674',	'6853688',	'12444707',	'6528643',	'7461425',	'11923150',	'6853914',	'1175278',	'17859080',	'16401947',	'4457161',	'12175196',	'3912315',	'18423706',	'18460988']))


# COMMAND ----------

data_filter_low = data_filter.where(col("listing_id").isin(
['16740225',	'789867',	'16701336',	'8148031',	'9492864',	'13028662',	'15909282',	'15799391',	'3318359',	'3907071',	'13074067',	'4011519',	'13892983',	'16023745',	'17676950',	'10610',	'13379881',	'16836657',	'3319109',	'18375776',	'15701532',	'15471122',	'12308104',	'12474957',	'3983057',	'18071978',	'15889957',	'15874839',	'12111530',	'15889904',	'10070422',	'15874365',	'15876178',	'15889919',	'15823434',	'10101026',	'10100835',	'10071396',	'12110676',	'12111066',	'16467855',	'18585265',	'12092498',	'16146505',	'7359188',	'16823953',	'16646072',	'16827583',	'9041069',	'17908408',	'7854234',	'3696178',	'18339858',	'13999202',	'9050138',	'6077875',	'8273329',	'18124704',	'14281166',	'15464357',	'17610618',	'1439042',	'15640689',	'13100435',	'17019650',	'15805987',	'14397701',	'8676695',	'408267',	'5481685',	'408268',	'9050129',	'8223102',	'8999175',	'1725110',	'16827863',	'16824773',	'3986991',	'14855558',	'14899794',	'13408456',	'15547371',	'13548290',	'13837551',	'13502828',	'18274867',	'4359719',	'15818427',	'16052779',	'7309782',	'618365',	'18373716',	'4330309',	'7989793',	'15545081',	'16189546',	'14091733',	'2824585',	'3946324',	'12112830',	'18414972',	'14586209',	'14958355',	'4067570',	'8484777',	'4365466',	'3742513',	'4351295',	'790934',	'6039038',	'6807789',	'15549146',	'8305935',	'6375968',	'5569521',	'3994046',	'17231066',	'14935932',	'15026300',	'14446278',	'12244370',	'15341369',	'12226594',	'1475647',	'8770382',	'9050149',	'14950882',	'13218606',	'1461451',	'18408506',	'16528767',	'10515185',	'16707059',	'10577807',	'4511517',	'16690759',	'626287',	'5095370',	'17850311',	'10469377',	'10156983',	'10844851',	'17795462',	'11544575',	'12218935',	'17844157',	'5794319',	'18033017',	'4133737',	'18314877',	'13529171',	'18162012',	'7069327',	'8117860',	'13539923',	'16528901',	'18438438',	'7787607',	'4511482',	'4511426',	'16963833',	'2117558',	'18159005',	'2117557',	'15535544',	'14486555',	'11799685',	'14895510',	'13280223',	'4979274',	'7650918',	'16589979',	'18484146',	'17158662',	'17921473',	'13358706',	'13240673',	'9303267',	'15436230',	'15042311',	'16040153',	'17235769',	'11680697',	'16709779',	'16558681',	'16592678',	'9488188',	'13003641',	'17895468',	'7203650',	'207116',	'14805288',	'18359380',	'220660',	'17159823',	'8422216',	'2515100',	'17302645',	'13588840',	'17569999',	'14914810',	'18583640',	'724895',	'724656',	'17929210',	'15324238',	'16996930',	'10098920',	'15519276',	'17191214',	'17157474',	'18194161',	'15453215',	'14027069',	'13788610',	'13064681',	'8014758',	'3479649',	'15966273',	'6504076',	'8167169',	'4647788',	'9233356',	'13980732',	'12891430',	'16096254',	'17934980',	'16986137',	'14169205',	'10811857',	'14371251',	'15480695',	'12268908',	'15480030',	'18092210',	'17745910',	'16068518',	'14282425',	'18428074',	'16068455',	'13900931',	'15821099',	'14553446',	'16722428',	'14015429',	'12917317',	'14014799',	'17073389',	'18108580',	'18519264',	'16568427',	'12916784',	'14014347',	'18255784',	'13915013',	'8716753',	'9995220',	'10034077',	'12434982',	'10020977',	'8135784',	'16088330',	'17925617',	'15619238',	'17680767',	'14126662',	'17617260',	'16395627',	'12467348',	'17479706',	'13990045',	'14731359',	'7197783',	'13954110',	'18524534',	'17404309',	'16999307',	'14589777',	'16554438',	'17126504',	'15618206',	'13978463',	'11261614',	'14649120',	'16336352',	'9531440',	'15094729',	'15871357',	'11670661',	'12493755',	'16778120',	'12494747',	'16999778',	'18637096',	'14770773',	'257601',	'14200918',	'13780638',	'15311581',	'15309122',	'12998977',	'438850',	'13027296',	'17154948',	'2611538',	'14088081',	'13033130',	'14180118',	'13033156',	'14969136',	'3177497',	'13065414',	'16172970',	'13066378',	'14857529',	'14857315',	'14857205',	'14857073',	'14856790',	'14855816',	'14857431',	'16496816',	'13550010',	'4318291',	'8988738',	'9708726',	'18591407',	'13379824',	'18591140',	'18476252',	'18475942',	'18590492',	'18588885',	'18465086',	'17904971',	'17405746',	'18215003',	'18332249',	'13047673',	'18446357',	'7885822',	'15343136',	'10999085',	'2305230',	'2305280',	'2364469',	'15289140',	'14089727',	'12891822',	'16751771',	'12708231',	'18490327',	'18094969',	'15045268',	'2930499',	'10947455',	'13975882',	'12158686',	'18327939',	'18327361',	'18327442',	'18327516',	'18327992',	'18327762',	'18327819',	'18326528',	'18328096',	'18327592',	'18327281',	'14115706',	'14115665',	'13859218',	'14473091',	'13671981',	'14028571',	'18549745',	'4105283',	'17079001',	'18195958',	'7094014',	'15219390',	'10576883',	'18373950',	'14556304',	'14141861',	'17876078',	'15669026',	'17666567',	'9403751',	'18158318',	'641526',	'204812',	'264184',	'12822377',	'641532',	'234060',	'6777362',	'12823231',	'233500',	'15456348',	'18006439',	'233528',	'17005094',	'14467472',	'8429764',	'4479828',	'11768586',	'8454437',	'6377862',	'15484924',	'13753623',	'14646743',	'14619020',	'14421786',	'14702468',	'15026595',	'6764230',	'15771629',	'15423943',	'12136219',	'17027582',	'12541151',	'15410843',	'17992312',	'13494669',	'2573888',	'17168028',	'7825308',	'18345901',	'18486947',	'32346',	'18429930',	'14529530',	'5223619',	'6419072',	'18600236',	'7430730',	'8288883',	'7807038',	'6975423',	'2576971',	'10131101',	'5511358',	'18157129',	'4214683',	'17895062',	'9596278',	'4567558',	'16302641',	'16556321',	'18072628',	'4735600',	'14967050',	'18580167',	'18463041',	'15379368',	'13189671',	'18588422',	'17147256',	'14429878',	'18582618',	'18609343',	'15378856',	'14215568',	'15344208',	'915372',	'5980645',	'15254346',	'6925326',	'16854051',	'12156610',	'13699494',	'7973300',	'10278470',	'7735577',	'17562263',	'14989350',	'3906329',	'10861804',	'8370508',	'8524788',	'2898588',	'13416364',	'15546520',	'13842166',	'16855993',	'9679005',	'15314428',	'7432064',	'14968345',	'6185638',	'16408143',	'7004149',	'3842224',	'7921380',	'17438195',	'15552457',	'6967492',	'4065712',	'479086',	'9577126',	'4589379',	'4235547',	'8799237',	'4612288',	'15550886',	'16163330',	'13335848',	'17434902',	'6448745',	'16528632',	'4060519',	'9269658',	'14797232',	'15114503',	'14076360',	'17075403',	'12568350',	'10824499',	'13863311',	'16371960',	'16031302',	'15926037',	'14892123',	'13509694',	'12090956',	'15925524',	'9690523',	'12467112',	'15925996',	'11276504',	'2515629',	'12243016',	'10100747',	'13635380',	'15925916',	'16269676',	'13656318',	'15926217',	'7982764',	'16486129',	'1027463',	'1027741',	'18560424',	'16194451',	'16781530',	'2564678',	'1027405',	'17565878',	'15757858',	'7360828',	'7327846',	'14055052',	'17679124',	'7796730',	'13186084',	'16365205',	'11056715',	'7804913',	'7382294',	'18078850',	'15409046',	'7095238',	'7805526',	'5804791',	'5785758',	'6957460',	'14301555',	'18374071',	'12221851',	'12222012',	'11599813',	'5958652',	'11532825',	'17637495',	'12222103',	'12221938',	'7370580',	'11040622',	'8827744',	'12039265',	'12039993',	'6472628',	'9007351',	'17905286',	'16493494',	'18221172',	'17267668',	'15463827',	'12192041',	'12221723',	'7511458',	'18521386',	'18522396',	'8689532',	'15064745',	'12211684',	'12211461',	'13244213',	'13128883',	'17207866',	'8522188',	'11146518',	'14747242',	'6900612',	'5283285',	'18178150',	'12321227',	'15843531',	'18465345',	'13374561',	'14614436',	'14692242',	'17140554',	'18465687',	'272728',	'3787859',	'15360917',	'611839',	'9096802',	'15548581',	'8985325',	'13311396',	'17448630',	'17448533',	'6004411',	'17448278',	'14518982',	'18360284',	'18561941',	'16447317',	'12602880',	'13117078',	'4720154',	'10588800',	'13230231',	'17160779',	'16964771',	'15392930',	'2907500',	'4192849',	'3811926',	'11011261',	'16723509',	'18328906',	'14139835',	'18329000',	'18515480',	'18591677',	'18350616',	'14502969',	'18591452',	'14237101',	'13667729',	'14933755',	'14139920',	'14025455',	'14450829',	'4052930',	'12254863',	'10696416',	'18393252']))

# COMMAND ----------

data_filter_low.show()

# COMMAND ----------

# Create separate dataframe based on the outliers in room pricing, 
# data_filter_high --> greater than average price
# data_filter_low --> lower than average price
# Concat all the reviews for single row
# Note: This approach is not scalable
data_filter_high_group_by = data_filter_high.agg(func.concat_ws(", ",func.collect_list(data_filter_high.comments))).withColumnRenamed("concat_ws(, , collect_list(comments))","comments")

data_filter_low_group_by = data_filter_low.agg(func.concat_ws(", ",func.collect_list(data_filter_low.comments))).withColumnRenamed("concat_ws(, , collect_list(comments))","comments")

# COMMAND ----------

stop = ['a', u'about', u'above', u'after', u'again', u'against', u'all', u'am', u'an', u'and', u'any', u'are', u'arent', u'as', u'at', 
    u'be', u'because', u'been', u'before', u'being', u'below', u'between', u'both', u'but', u'by', 
    u'can', 'cant', 'come', u'could', 'couldnt', 
    u'd', u'did', u'didn', u'do', u'does', u'doesnt', u'doing', u'dont', u'down', u'during', 
    u'each', 
    u'few', 'finally', u'for', u'from', u'further', 
    u'had', u'hadnt', u'has', u'hasnt', u'have', u'havent', u'having', u'he', u'her', u'here', u'hers', u'herself', u'him', u'himself', u'his', u'how', 
    u'i', u'if', u'in', u'into', u'is', u'isnt', u'it', u'its', u'itself', 
    u'just', 
    u'll', 
    u'm', u'me', u'might', u'more', u'most', u'must', u'my', u'myself', 
    u'no', u'nor', u'not', u'now', 
    u'o', u'of', u'off', u'on', u'once', u'only', u'or', u'other', u'our', u'ours', u'ourselves', u'out', u'over', u'own', 
    u'r', u're', 
    u's', 'said', u'same', u'she', u'should', u'shouldnt', u'so', u'some', u'such', 
    u't', u'than', u'that', 'thats', u'the', u'their', u'theirs', u'them', u'themselves', u'then', u'there', u'these', u'they', u'this', u'those', u'through', u'to', u'too', 
    u'under', u'until', u'up', 
    u'very', 
    u'was', u'wasnt', u'we', u'were', u'werent', u'what', u'when', u'where', u'which', u'while', u'who', u'whom', u'why', u'will', u'with', u'wont', u'would', 
    u'y', u'you', u'your', u'yours', u'yourself', u'yourselves']

# COMMAND ----------

# function to get the non trivial words from the string

#stop=stopwords.words('english') 
def purify(str_line):
    str_line =re.sub('[^\w\s]+', ' ', str_line) 
    str_line =re.sub('\s+', ' ', str_line)
    str_line =re.sub('\d+', ' ', str_line)
    str_line = re.sub("'", '', str_line)
    str_line =re.sub('(\\b[A-Za-z] \\b|\\b [A-Za-z]\\b)', '', str_line)
    str_line = str_line.lower()
    str_words = [ j for j in str_line.split() if len(j) > 2 and j not in stop]  
    return str_words

# COMMAND ----------

# Clean the string
high_word_list = str(data_filter_high_group_by.collect())
high_word_list = purify(high_word_list)

low_word_list = str(data_filter_low_group_by.collect())
low_word_list = purify(low_word_list)

type(high_word_list)

# COMMAND ----------

low_word_list

# COMMAND ----------

high_words = sc.parallelize(high_word_list)
low_words = sc.parallelize(low_word_list)

# COMMAND ----------

high_counts = high_words.map(lambda x: (x,1)).reduceByKey(lambda a,b: a+b)
low_counts = low_words.map(lambda x: (x,1)).reduceByKey(lambda a,b: a+b)

# COMMAND ----------

# Positive words
high_reversed_map = high_counts.map(lambda (k,v): (v,k)).sortByKey(False)
high_original_map = high_reversed_map.map(lambda (k,v): (v,k))
high_original_map.take(30)

# COMMAND ----------

# Negative words
low_reversed_map = low_counts.map(lambda (k,v): (v,k)).sortByKey(False)
low_original_map = low_reversed_map.map(lambda (k,v): (v,k))
low_original_map.take(30)

# COMMAND ----------

high_two_counts = high_words.map(lambda x: [(x[i]+' '+x[i+1],1) for i in range(0,len(x)-1)]).reduceByKey(lambda a,b: a+b)
#low_two_counts = low_words.map(lambda x: (x,1)).reduceByKey(lambda a,b: a+b)

# COMMAND ----------

high_reversed_map2 = high_two_counts.map(lambda (k,v): (v,k)).sortByKey(False)
#high_original_map2 = high_reversed_map2.map(lambda (k,v): (v,k))
#high_original_map2.take(30)

# COMMAND ----------

#bigrams = text.map(lambda x:x.split(' ')) \
#    .flatMap(lambda x: [(x[i]+' '+x[i+1],1) for i in range(0,len(x)-1)])

#bigram_freq = bigrams.reduceByKey(lambda x,y: x+y)  \
#    .map(lambda x: [x[1], x[0]])                    \
#    .sortByKey(ascending=False)
